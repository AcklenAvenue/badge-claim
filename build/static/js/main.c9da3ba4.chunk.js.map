{"version":3,"sources":["components/BadgeHeader/BadgeHeader.js","components/BadgeContent/BadgeContent.js","containers/BadgeContainer.js","components/LandingForm/LandingForm.js","containers/LandingContainer.js","App.js","serviceWorker.js","index.js","images/badgeIcon.png"],"names":["BadgeHeader","props","className","src","imageSource","alt","badgeName","align","href","badgeDescription","BadgeContent","source","criteriaNarrative","criteriaURL","BadgeContainer","state","badgeToken","badgeData","params","this","match","setState","badge_token","axios","get","then","res","data","result","catch","err","console","log","image","name","description","criteriaUrl","Component","LandingForm","onSubmit","handleSearchBadgeSubmit","class","icon","width","height","htmlFor","type","id","onChange","handleBadgeInputChange","placeholder","LandingContainer","e","badgeId","target","value","preventDefault","history","push","withRouter","App","exact","path","component","Boolean","window","location","hostname","defaults","baseURL","process","API_URL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c9da3ba4.chunk.js","sourcesContent":["import React from 'react'\nimport './BadgeHeader.css'\n\nconst BadgeHeader = props => \n    <div className=\"badge-summary jumbotron\">\n        <div className=\"container-fluid text-left\">\n            <div className=\"row\">\n                <div className=\"badge-sidebar offset-sm-0 offset-md-1 offset-lg-2\">\n                    <img className=\"badge-image img-fluid\" src={props.imageSource} alt=\"This is a badge\"/>                    \n                </div>\n                <div className=\"col-4 offset-4\">\n                    <h1>{props.badgeName}</h1>\n                </div>\n                <div className=\"col-2\" align=\"center\">\n                    <p>\n                        <a href=\"/\" className=\"btn btn-primary claim-badge-button btn-lg\">Claim badge</a>\n                    </p>\n                </div>\n                <div className=\"badge-summary-container col-4 offset-4\">\n                    <p className=\"description\">{props.badgeDescription}</p>\n                </div>\n            </div>                    \n        </div>\n    </div>\n\nexport default BadgeHeader;\n","import React from 'react'\nimport './BadgeContent.css'\nimport ReactMarkdown from 'react-markdown';\n\nconst BadgeContent = props => \n    <div className=\"row\">\n        <div className=\"col-10 offset-4 text-left\">\n        <h3>Criteria</h3>\n        <ReactMarkdown source={props.criteriaNarrative} />\n        <a href={props.criteriaURL} className=\"criteria-url-link\">View external Criteria URL</a>\n        </div>\n    </div>                    \n\nexport default BadgeContent;","import React, { Component } from 'react'\nimport axios from 'axios';\nimport BadgeHeader from '../components/BadgeHeader/BadgeHeader'\nimport BadgeContent from '../components/BadgeContent/BadgeContent'\n\nclass BadgeContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            badgeToken: '',\n            badgeData: {}\n        }\n    }\n\n    componentDidMount() {\n        const { match: {params}} = this.props\n        this.setState({\n            badgeToken: params.badge_token\n        })\n        axios\n            .get(`/badge/${params.badge_token}`)\n            .then(res => {\n                this.setState({\n                    badgeData: res.data.result[0]\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <BadgeHeader imageSource={this.state.badgeData.image} badgeName={this.state.badgeData.name} badgeDescription={this.state.badgeData.description}/>\n                <div className=\"container-fluid\">\n                    <BadgeContent criteriaNarrative={this.state.badgeData.criteriaNarrative} criteriaURL={this.state.badgeData.criteriaUrl} />\n                </div>\n            </div>\n        )\n        \n    }\n}\n\nexport default BadgeContainer;","import React from 'react';\nimport './LandingForm.css';\nimport icon from '../../images/badgeIcon.png';\n\nconst LandingForm = props => \n    <div className=\"form-container\">\n        <form className=\"form-badge-search\" onSubmit={props.handleSearchBadgeSubmit}>\n            <img class=\"mb-4 badge-icon\" src={icon} alt=\"\" width=\"72\" height=\"72\"/>\n            <hi className=\"h3 mb-3 font-weight-normal\">Looking for a badge?</hi>\n            <label htmlFor=\"badgeId\" className=\"sr-only\">Badge Id</label>\n            <input type=\"text\" id=\"badgeId\" className=\"form-control mb-3\" onChange={props.handleBadgeInputChange} placeholder=\"Badge Id\"/>\n            <button className=\"btn btn-lg btn-primary btn-block search-button\">Search</button>\n        </form>                   \n    </div>\n\nexport default LandingForm;","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom';\nimport LandingForm from '../components/LandingForm/LandingForm'\n\nclass LandingContainer extends Component {  \n    constructor(props) {\n        super(props)\n        this.state = {\n            badgeId: ''        \n        }\n      }\n    \n      handleBadgeInputChange = (e) => {\n        this.setState({\n          badgeId: e.target.value\n        })\n      }\n    \n      handleSearchBadgeSubmit = (e) => {\n        e.preventDefault();\n        this.props.history.push(`/badgeid/${this.state.badgeId}`)\n      }\n\n      render() {\n          return (\n            <LandingForm handleBadgeInputChange={this.handleBadgeInputChange} handleSearchBadgeSubmit={this.handleSearchBadgeSubmit}/>\n          )\n      }\n}    \n\nexport default withRouter(LandingContainer)","import React, { Component } from 'react';\nimport './App.css';\nimport BadgeContainer from './containers/BadgeContainer';\nimport LandingContainer from './containers/LandingContainer';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nclass App extends Component {\n  \n  render () {\n      return (\n        <Router>\n          <div className=\"App\">\n            <Switch>\n              <Route exact path='/' component={LandingContainer} />\n              <Route path='/badgeid/:badge_token' component={BadgeContainer}/>\n            </Switch>\n          </div>\n        </Router>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = process.env.API_URL || '/api'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/badgeIcon.bf081ef7.png\";"],"sourceRoot":""}